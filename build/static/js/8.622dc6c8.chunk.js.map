{"version":3,"sources":["shared/components/UIElements/Card.js","places/pages/UpdatePlace.js"],"names":["Card","props","className","style","children","UpdatePlace","auth","useContext","AuthContext","useState","loadedPlace","setLoadedPlace","useHttpClient","isLoading","error","sendRequest","clearError","placeId","useParams","useForm","title","value","isValid","description","formState","inputHandler","setFormData","history","useHistory","useEffect","a","process","responseData","console","log","place","fetchPlace","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled"],"mappings":"qHAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,2NCwHEC,UA5GK,WAClB,IAAMC,EAAOC,qBAAWC,KADA,EAEcC,qBAFd,mBAEjBC,EAFiB,KAEJC,EAFI,OAGgCC,cAA9CC,EAHc,EAGdA,UAAWC,EAHG,EAGHA,MAAOC,EAHJ,EAGIA,YAAaC,EAHjB,EAGiBA,WAEjCC,EAAUC,cAAYD,QALN,EAOyBE,YAAQ,CAC/CC,MAAO,CACHC,MAAO,GACPC,SAAS,GAEbC,YAAa,CACTF,MAAO,GACPC,SAAS,KAGjB,GAjBkB,mBAOfE,EAPe,KAOJC,EAPI,KAOUC,EAPV,KAoBhBC,EAAUC,cAGhBC,qBAAU,YACQ,uCAAG,4BAAAC,EAAA,sEAEUf,EAAY,GAAD,OAAIgB,0CAAJ,sBAAmDd,IAFxE,OAEXe,EAFW,OAGjBC,QAAQC,IAAIF,GACZrB,EAAeqB,EAAaG,OAEhBT,EAAY,CACJN,MAAO,CACHC,MAAOW,EAAaG,MAAMf,MAC1BE,SAAS,GAEbC,YAAa,CACTF,MAAOW,EAAaG,MAAMZ,YAC1BD,SAAS,KAGjB,GAhBC,2CAAH,qDAmBhBc,KAEC,CAACrB,EAAaE,IAIjB,IAAMoB,EAAwB,uCAAG,WAAMC,GAAN,SAAAR,EAAA,6DAC7BQ,EAAMC,iBADuB,kBAGnBxB,EAAY,GAAD,OAAIgB,0CAAJ,sBAAmDd,GAChE,QACAuB,KAAKC,UAAU,CACXrB,MAAOI,EAAUkB,OAAOtB,MAAMC,MAC9BE,YAAaC,EAAUkB,OAAOnB,YAAYF,QAC1C,CAAE,eAAgB,mBAAoBsB,cAAe,UAAUrC,EAAKsC,QARnD,OAUzBjB,EAAQkB,KAAR,WAAiBvC,EAAKwC,OAAtB,YAVyB,gDAYzBb,QAAQC,IAAR,MAZyB,yDAAH,sDAgB9B,OACkB,kBAAC,IAAMa,SAAP,KAChB,kBAAC,IAAD,CAAYjC,MAAOA,EAAOkC,QAAShC,IAClCH,GACC,yBAAKX,UAAU,UACb,kBAAC,IAAD,QAIDW,GAAaH,GAAe,0BAAMR,UAAU,aAAa+C,SAAUZ,GAEtE,kBAAC,IAAD,CACEa,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAShC,EACTiC,aAAchD,EAAYU,MAC1BuC,cAAc,IAEhB,kBAAC,IAAD,CACET,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAAShC,EACTiC,aAAchD,EAAYa,YAC1BoC,cAAc,IAEhB,kBAAC,IAAD,CAAQP,KAAK,SAASS,UAAWrC,EAAUF,SAA3C,kBAKAR,IAAUD,IAAcH,GAAe,yBAAKR,UAAU,UAAS,kBAAC,IAAD,KAAM","file":"static/js/8.622dc6c8.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState, useContext } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport Card from '../../shared/components/UIElements/Card';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport {\n    VALIDATOR_REQUIRE,\n    VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './PlaceForm.css';\n\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const [loadedPlace, setLoadedPlace] = useState();\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n    const placeId = useParams().placeId;\n\n    const [formState, inputHandler, setFormData] = useForm({\n            title: {\n                value: '',\n                isValid: false\n            },\n            description: {\n                value: '',\n                isValid: false\n            }\n        },\n        false\n    );\n\n    const history = useHistory();\n\n\n    useEffect(() => {\n      const fetchPlace = async () =>{\n\n        const responseData = await sendRequest(`${process.env.REACT_APP_BACKEND_URL}api/places/${placeId}`);\n        console.log(responseData);\n        setLoadedPlace(responseData.place);\n                \n                    setFormData({\n                            title: {\n                                value: responseData.place.title,\n                                isValid: true\n                            },\n                            description: {\n                                value: responseData.place.description,\n                                isValid: true\n                            }\n                        },\n                        true\n                    );\n      };\n      fetchPlace();\n\n    }, [sendRequest, placeId]);\n\n\n\n    const placeUpdateSubmitHandler = async event => {\n        event.preventDefault();\n        try {\n            await sendRequest(`${process.env.REACT_APP_BACKEND_URL}api/places/${placeId}`,\n                'PATCH',\n                JSON.stringify({\n                    title: formState.inputs.title.value,\n                    description: formState.inputs.description.value\n                }), { 'Content-type': 'application/json', Authorization: 'Bearer '+auth.token }\n            );\n            history.push(`/${auth.userId}/places`);\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    return (\n                      <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n\n       {!isLoading && loadedPlace && <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n        \n      <Input\n        id=\"title\"\n        element=\"input\"\n        type=\"text\"\n        label=\"Title\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Please enter a valid title.\"\n        onInput={inputHandler}\n        initialValue={loadedPlace.title}\n        initialValid={true}\n      />\n      <Input\n        id=\"description\"\n        element=\"textarea\"\n        label=\"Description\"\n        validators={[VALIDATOR_MINLENGTH(5)]}\n        errorText=\"Please enter a valid description (min. 5 characters).\"\n        onInput={inputHandler}\n        initialValue={loadedPlace.description}\n        initialValid={true}\n      />\n      <Button type=\"submit\" disabled={!formState.isValid}>\n        UPDATE PLACE\n      </Button>\n    </form>}\n\n    {!error && !isLoading && !loadedPlace && <div className=\"center\"><Card><h2>Could not find place</h2></Card></div> }\n                    </React.Fragment>\n\n    );\n};\n\nexport default UpdatePlace;"],"sourceRoot":""}