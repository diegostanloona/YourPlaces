{"version":3,"sources":["shared/context/auth-context.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/Backdrop.js","shared/hooks/auth-hook.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userId","token","login","logout","LoadingSpinner","props","className","asOverlay","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","logoutTimer","MainHeader","children","NavLinks","auth","useContext","to","exact","SideDrawer","content","CSSTransition","in","show","timeout","classNames","enterActive","enterDone","exitActive","exitDone","mountOnEnter","unmountOnExit","MainNavigation","useState","drawerIsOpen","setDrawerIsOpen","closeDrawerHandler","Fragment","src","alt","Users","React","lazy","NewPlace","UserPlaces","UpdatePlace","Auth","App","routes","setToken","tokenExpirationDate","setTokenExpirationDate","setUserId","useCallback","uid","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","value","fallback","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5ca01e3f.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nexport const AuthContext = createContext({\n\tisLoggedIn: false,\n\tuserId: null,\n\ttoken: null,\n\tlogin: () => {\n\n\t},\n\tlogout: () => {\n\n\t}\n});","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import { useState, useCallback, useEffect } from 'react';\n\nlet logoutTimer;\n\nexport const useAuth = () => {\n\tconst [token, setToken] = useState();\n    const [tokenExpirationDate, setTokenExpirationDate] = useState();\n    const [userId, setUserId] = useState(false);\n\n\n\n    const login = useCallback((uid, token, expirationDate) => {\n        setToken(token);\n        setUserId(uid);\n        const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60 * 8760);\n        setTokenExpirationDate(tokenExpirationDate);\n        localStorage.setItem('userData', JSON.stringify({ userId: uid, token: token, expiration: tokenExpirationDate.toISOString() }));\n    }, []);\n\n    const logout = useCallback(() => {\n        setToken(null);\n        setTokenExpirationDate(null);\n        setUserId(null);\n        localStorage.removeItem('userData');\n    }, []);\n\n    useEffect(() => {\n      if(token && tokenExpirationDate){\n        const remainingTime = tokenExpirationDate.getTime() - new Date().getTime();\n        logoutTimer = setTimeout(logout, remainingTime);\n      }else{\n        clearTimeout(logoutTimer);\n      }\n    }, [token, logout, tokenExpirationDate]);\n\n    useEffect(() => {\n        const storedData = JSON.parse(localStorage.getItem('userData'));\n        if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n            login(storedData.userId, storedData.token);\n        }\n    }, [login]);\n    return {token, login, logout, userId};\n};","import React from 'react';\n\nimport './MainHeader.css';\n\nconst MainHeader = props => {\n\n\treturn ( <header className=\"main-header\">\n\t\t{props.children}\n\t</header> );\n\n};\n\nexport default MainHeader;","import React, { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { AuthContext } from '../../context/auth-context';\nimport './NavLinks.css';\n\nconst NavLinks = props => {\n\tconst auth = useContext(AuthContext);\n \n\treturn ( <ul className=\"nav-links\">\n\t\t<li>\n\t\t\t<NavLink to=\"/\" exact>ALL USERS</NavLink>\n\t\t</li>\n\t\t{auth.isLoggedIn && (\n\t\t<li>\n\t\t\t<NavLink to={`/${auth.userId}/places`}>MY PLACES</NavLink>\n\t\t</li>\n\t\t)}\n\t\t{auth.isLoggedIn && (\n\t\t<li>\n\t\t\t<NavLink to=\"/places/new\">ADD PLACE</NavLink>\n\t\t</li>\n\t\t)}\n\t\t{!auth.isLoggedIn && (\n\t\t<li>\n\t\t\t<NavLink to=\"/auth\">AUTHENTICATE</NavLink>\n\t\t</li>\n\t\t)}\n\t\t{auth.isLoggedIn && (\n\t\t<li>\n\t\t\t<button onClick={auth.logout}>LOGOUT</button>\n\t\t</li>\n\t\t)}\n\t</ul>);\n};\n\nexport default NavLinks;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport './SideDrawer.css';\n\nconst SideDrawer = props => {\n\tconst content = (\n\t\t<CSSTransition in={props.show} timeout={200} classNames={{\n\t\t\tenterActive: \"Slide-in-left-enter\",\n\t\t\tenterDone: \"Slide-in-left-enter-active\",\n\t\t\texitActive: \"Slide-in-left-exit\",\n\t\t\texitDone: \"Slide-in-left-exit-active\"\n\t\t}} mountOnEnter unmountOnExit>\n\t\t\t<aside className=\"side-drawer\" onClick={props.onClick}>{props.children}</aside>\n\t\t</CSSTransition> );\n\treturn ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\n};\n\nexport default SideDrawer;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport MainHeader from './MainHeader';\nimport NavLinks from './NavLinks';\nimport SideDrawer from './SideDrawer';\nimport Backdrop from '../UIElements/Backdrop';\nimport './MainNavigation.css';\n\nconst MainNavigation = props =>{\n\n\tconst [drawerIsOpen, setDrawerIsOpen] = useState(false);\n\n\tconst openDrawerHandler = () =>{\n\t\tsetDrawerIsOpen(true);\n\t};\n\n\tconst closeDrawerHandler = () =>{\n\t\tsetDrawerIsOpen(false);\n\t};\n\n\treturn(\n\t\t<React.Fragment>\n\t\t{\n\t\t\tdrawerIsOpen && (\n\t\t\t\t<Backdrop onClick={closeDrawerHandler}></Backdrop>\n\t\t\t)\n\t\t}\n\t\t{\n\t\t\tdrawerIsOpen && (\n\t\t\t\t<SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\n\t\t\t\t\t<nav className=\"main-navigation__drawer-nav\">\n\t\t\t\t\t\t<NavLinks/>\n\t\t\t\t\t</nav>\n\t\t\t\t</SideDrawer>\n\t\t\t)\n\t\t}\n\t\t\t\n\t\t<MainHeader>\n\t\t\t<button className=\"main-navigation__menu-btn\" onClick={openDrawerHandler}>\n\t\t\t\t<span></span>\n\t\t\t\t<span></span>\n\t\t\t\t<span></span>\n\t\t\t</button>\n\t\t\t<h1 className=\"main-navigation__title\">\n\t\t\t\t<Link to=\"/\"><img src=\"logo.png\" alt=\"\"/></Link>\n\t\t\t</h1>\n\t\t\t<nav className=\"main-navigation__header-nav\">\n\t\t\t\t<NavLinks/>\n\t\t\t</nav>\n\t\t</MainHeader>\n\t\t</React.Fragment>\n\t\t\n\t\t);\n\n};\n\nexport default MainNavigation;\n\n","import React, { Suspense } from 'react';\nimport { BrowserRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n// import Users from './user/pages/Users';\n// import NewPlace from './places/pages/NewPlace';\n// import UserPlaces from './places/pages/UserPlaces';\n// import UpdatePlace from './places/pages/UpdatePlace';\n// import Auth from './user/pages/Auth';\nimport LoadingSpinner from './shared/components/UIElements/LoadingSpinner';\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\nimport { AuthContext } from './shared/context/auth-context';\nimport { useAuth } from './shared/hooks/auth-hook';\n\nconst Users = React.lazy(() => import('./user/pages/Users'));\nconst NewPlace = React.lazy(() => import('./places/pages/NewPlace'));\nconst UserPlaces = React.lazy(() => import('./places/pages/UserPlaces'));\nconst UpdatePlace = React.lazy(() => import('./places/pages/UpdatePlace'));\nconst Auth = React.lazy(() => import('./user/pages/Auth'));\n\nconst App = () => {\n\n    const {token, login, logout, userId} = useAuth();\n\n    let routes;\n\n    if (token) {\n        routes = (\n            <Switch>\n        <Route path=\"/\" exact>\n          <Users/>\n        </Route>\n       <Route path=\"/:userId/places\" exact>\n          <UserPlaces/>\n        </Route>\n       <Route path=\"/places/new\" exact>\n        <NewPlace/>\n      </Route>\n      <Route path=\"/places/:placeId\">\n        <UpdatePlace/>\n      </Route>\n        <Redirect to=\"/\"/>\n        </Switch>\n        );\n    } else {\n        routes = (\n            <Switch>\n        <Route path=\"/\" exact>\n          <Users/>\n        </Route>\n       <Route path=\"/:userId/places\" exact>\n          <UserPlaces/>\n        </Route>\n        <Route path=\"/auth\">\n          <Auth/>\n        </Route>\n        <Redirect to=\"/auth\"/>\n        </Switch>\n        );\n    }\n\n    return (\n        <AuthContext.Provider value={{isLoggedIn: !!token, token: token, userId:userId, login: login, logout: logout}}>\n        <Router>\n        <MainNavigation/>\n        <main>\n        <Suspense fallback={<div className=\"center\"><LoadingSpinner></LoadingSpinner></div>}>\n          {routes}\n        </Suspense> \n          </main>\n        </Router>\n      </AuthContext.Provider>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}