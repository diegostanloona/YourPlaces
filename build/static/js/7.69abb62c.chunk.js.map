{"version":3,"sources":["shared/components/FormElements/ImageUpload.js","places/pages/NewPlace.js"],"names":["ImageUpload","props","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","id","ref","style","display","type","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","onClick","current","click","errorText","NewPlace","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","description","address","image","formState","inputHandler","history","useHistory","placeSubtmitHandler","a","preventDefault","console","log","inputs","formData","FormData","append","userId","process","Authorization","token","push","Fragment","onClear","onSubmit","asOverlay","element","label","validators","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","disabled"],"mappings":"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","file":"static/js/7.69abb62c.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\n\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n\n\tconst [file, setFile] = useState();\n\tconst [previewUrl, setPreviewUrl] = useState();\n\tconst [isValid, setIsValid] = useState(false);\n\n\tconst filePickerRef = useRef();\n\n\tuseEffect(() => {\n\t\tif(!file){\n\t\t\treturn;\n\t\t}\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.onload = () => {\n\t\t\tsetPreviewUrl(fileReader.result);\n\t\t};\n\t\tfileReader.readAsDataURL(file);\n\t}, [file]);\n\n\tconst pickImageHandler = () => {\n\t\tfilePickerRef.current.click();\n\t};\n\n\tconst pickedHandler = (event) => {\n\t\tlet pickedFile;\n\t\tlet fileIsValid = isValid;\n\t\tif(event.target.files && event.target.files.length === 1){\n\t\t\tpickedFile = event.target.files[0];\n\t\t\tsetFile(pickedFile);\n\t\t\tsetIsValid(true);\n\t\t\tfileIsValid = true;\n\t\t}else{\n\t\t\tsetIsValid(false);\n\t\t\tfileIsValid = false;\n\t\t}\n\t\tprops.onInput(props.id, pickedFile, fileIsValid);\n\t};\n\n\treturn(\n\t\t<div className=\"form-control\">\n\t\t\t<input id={props.id} ref={filePickerRef} style={{display: 'none'}} type=\"file\" accept=\".jpg, .png, .jpeg\" onChange={pickedHandler}/>\n\t\t\t<div className={`image-upload ${props.center && 'center'}`}>\n\t\t\t\t<div className=\"image-upload__preview\">\n\t\t\t\t\t{previewUrl && <img src={previewUrl} alt=\"Preview\"/>}\n\t\t\t\t\t{!previewUrl && <p>Please pick an image.</p>}\n\t\t\t\t</div>\n\t\t\t\t<Button type=\"button\" onClick={pickImageHandler}>PICK IMAGE</Button>\n\t\t\t</div>\n\t\t\t{!isValid && <p>{props.errorText}</p>}\n\t\t</div>\n\t);\n};\n\nexport default ImageUpload;","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport ImageUpload from '../../shared/components/FormElements/ImageUpload';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport {\n    VALIDATOR_REQUIRE,\n    VALIDATOR_MINLENGTH\n} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nimport './PlaceForm.css';\n\n\nconst NewPlace = () => {\n    const auth = useContext(AuthContext);\n\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n    const [formState, inputHandler] = useForm({\n        title: {\n            value: '',\n            isValid: false\n        },\n        description: {\n            value: '',\n            isValid: false\n        },\n        address: {\n            value: '',\n            isValid: false\n        },\n        image: {\n            value: null,\n            isValid: false\n        }\n    }, false);\n\n    const history = useHistory();\n\n    const placeSubtmitHandler = async event => {\n        event.preventDefault();\n        console.log(formState.inputs); //Backend\n        try {\n            const formData = new FormData();\n            formData.append('title', formState.inputs.title.value);\n            formData.append('description', formState.inputs.description.value);\n            formData.append('address', formState.inputs.address.value);\n            formData.append('creator', auth.userId);\n            formData.append('image', formState.inputs.image.value);\n            \n            await sendRequest(`${process.env.REACT_APP_BACKEND_URL}api/places/`,\n                'POST',\n                formData,\n                {Authorization: 'Bearer '+auth.token}\n            );\n            history.push('/');\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    return (\n      <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n        <form className=\"place-form\" onSubmit={placeSubtmitHandler}>\n        {isLoading && \n          <LoadingSpinner asOverlay/>\n        }\n      <Input\n        id=\"title\"\n        element=\"input\"\n        label=\"Title\"\n        validators={[VALIDATOR_REQUIRE()]}\n        errorText=\"Please enter a valid title.\"\n        onInput={inputHandler}\n      />\n      <ImageUpload id=\"image\" center onInput={inputHandler} errorText=\"Please select an image.\"/>\n      <Input\n        id=\"description\"\n        element=\"textarea\"\n        label=\"Description\"\n        validators={[VALIDATOR_MINLENGTH(5)]}\n        errorText=\"Please enter a valid description (at least 5 characters).\"\n        onInput={inputHandler}\n      />\n      <Input\n        id=\"address\"\n        element=\"input\"\n        label=\"Address\"\n        validators={[VALIDATOR_REQUIRE]}\n        errorText=\"Please enter a valid address.\"\n        onInput={inputHandler}\n      />\n      <Button type=\"submit\" disabled={!formState.isValid}>\n        ADD PLACE\n      </Button>\n    </form>\n    </React.Fragment>\n    );\n};\n\nexport default NewPlace;"],"sourceRoot":""}